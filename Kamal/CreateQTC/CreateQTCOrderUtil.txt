public class CreateQTCOrderUtil {
    public static void insertOrder(RestRequest req){
        Blob body;
        if(req != null) body = req.requestBody;
        System.debug('Blob value' + body);
        String requestString = body.toString();
        System.debug('String value' + requestString );
        insertOrderLI(requestString);
    }
    
    //@future
    public static void insertOrderLI(String requestString){
        List<LightningCart_Wrapper.primaryClass> finalJson = new List<LightningCart_Wrapper.primaryClass>();
        RequestDataWrapper rw;
        Map<String, Pricinghandler.catalogwrapper> catalogProdMap = new Map<String, Pricinghandler.catalogwrapper>();
        Map<String, Pricinghandler.catalogwrapper> catalogProdMap2 = new Map<String, Pricinghandler.catalogwrapper>();
        List<ProductCatWrap> pCatWrap = new List<ProductCatWrap>();
        Map<String, ProductCatWrap> productActualPriceMap = new Map<String, ProductCatWrap>();
        List<Apttus_Proposal__Proposal__c> quoteProposal = new List<Apttus_Proposal__Proposal__c>();
        Id quoteId;
        Map<String, ProductInfoWrapper> productsMap;
        Map<String, Product2> prodIdMap;
        LocationWrapper locWrap;
        List<LocationWrapper> locWrapList = new List<LocationWrapper>();
        if(string.isNotBlank(requestString)){
            rw = (RequestDataWrapper)JSON.deserialize(requestString, RequestDataWrapper.class);
            quoteId = rw.quoteId;
            productsMap = rw.products;
            prodIdMap = getProdIds(productsMap.keySet());
            locWrap = rw.location;
            locWrapList.add(locWrap);
        }
        //Getting Product Prices from Pricelist present on Quote  
        if(String.isNotBlank(quoteId)){
            quoteProposal = [select id, Apttus_Proposal__Primary_Contact__c, Apttus_QPConfig__PriceListId__c, 
                                Apttus_QPConfig__PriceListId__r.Tier_Based_Pricing_Needed__c, Apttus_QPConfig__LocationId__c, 
                                Apttus_Proposal__Opportunity__c, Order__c, Contract_Terms__c, Apttus_Proposal__ExpectedStartDate__c, 
                                Apttus_Proposal__ExpectedEndDate__c, Apttus_Proposal__Account__r.Free_Month_End_Date__c,
                                Payment_Method__c, Apttus_Proposal__Account__c from Apttus_Proposal__Proposal__c 
                                where id=:quoteId];                                       
            if(quoteProposal.size() > 0){
                String productCatalog = Pricinghandler.getProductPricing(quoteProposal[0].Apttus_Proposal__Account__c, quoteProposal[0].Apttus_QPConfig__PriceListId__c, '');
                if(string.isNotBlank(productCatalog)){
                    pCatWrap = (List<ProductCatWrap>) System.JSON.deserialize(productCatalog, List<ProductCatWrap>.class);
                }
            }
            if(pCatWrap != null){
                for(ProductCatWrap pcw : pCatWrap){
                    if(String.isNotBlank(pcw.productName) && productsMap != null && productsMap.containsKey(pcw.productName)){
                        productActualPriceMap.put(pcw.productName, pcw);
                    }
                }
            }
        }

system.debug('RSSSSSSS quoteProposal[0].Apttus_Proposal__Account__c '+ quoteProposal[0].Apttus_Proposal__Account__c);
system.debug('RSSSSSSS quoteProposal[0].Apttus_QPConfig__PriceListId__c '+ quoteProposal[0].Apttus_QPConfig__PriceListId__c);
        String result = Pricinghandler.getProductPricingNew(quoteProposal[0].Apttus_Proposal__Account__c, quoteProposal[0].Apttus_QPConfig__PriceListId__c,'');
        String result2 = Pricinghandler.getProductPricingNew(quoteProposal[0].Apttus_Proposal__Account__c, System.Label.PRM_8x8_Default_Price_List,'');
system.debug('RSSSSSSS result '+result );
        List<Pricinghandler.catalogwrapper> res = (List<Pricinghandler.catalogwrapper>)JSON.deserialize(result,List<Pricinghandler.catalogwrapper>.class);
        List<Pricinghandler.catalogwrapper> res2 = (List<Pricinghandler.catalogwrapper>)JSON.deserialize(result2,List<Pricinghandler.catalogwrapper>.class);
        for(Pricinghandler.catalogwrapper each: res){
            catalogProdMap.put(each.priceListItemId,each);
            catalogProdMap2.put(each.productCode,each); 
        }
        for(Pricinghandler.catalogwrapper each: res2){
            catalogProdMap2.put(each.productCode,each);
        }
        
        Set<String> prodList = new Set<String>();
        for(String str : System.Label.PRM_HideProductsFromDealDeskCart.split(',')){
            prodList.add(str);
        }
        
        for(LocationWrapper each: locWrapList){
            LightningCart_Wrapper.primaryClass obj = new LightningCart_Wrapper.primaryClass();
            LightningCart_Wrapper.location loc = new LightningCart_Wrapper.location();
            LightningCart_Wrapper.shippingMethod shipMethod = new LightningCart_Wrapper.shippingMethod();
            loc.locationId = each.locationId;
            String locName = each.Street + ',' + each.city + ',' + each.state + ',' + each.country + ',' + each.zip;
            loc.name = locName;
            loc.city= each.city;
            loc.state= each.state;
            loc.zip= each.zip;
            loc.country = each.country;
            Decimal totalVal =0;
            List<LightningCart_Wrapper.product> prods = new List<LightningCart_Wrapper.product>();
            for(String LineItem : productsMap.keySet()){    
                LightningCart_Wrapper.product  LightningCart_Wrapper_product =new  LightningCart_Wrapper.product();
                LightningCart_Wrapper_product.productId    = prodIdMap.get(LineItem).Id;
                LightningCart_Wrapper_product.productName  = prodIdMap.get(LineItem).Name;
                LightningCart_Wrapper_product.productCode  = prodIdMap.get(LineItem).ProductCode;
                LightningCart_Wrapper_product.family = prodIdMap.get(LineItem).Family;
                LightningCart_Wrapper_product.subCategory  = prodIdMap.get(LineItem).Product_Sub_Category__c;
                LightningCart_Wrapper_product.isHardware  = prodIdMap.get(LineItem).APTSCU_Is_Hardware__c;
                LightningCart_Wrapper_product.NetPrice  = String.valueOf(productActualPriceMap.get(LineItem).ActualPrice);
                LightningCart_Wrapper_product.price  = String.valueOf(productActualPriceMap.get(LineItem).ActualPrice);
                if(LightningCart_Wrapper_product.price == null)
                    LightningCart_Wrapper_product.price = '0';
                if(productActualPriceMap.get(LineItem).ActualPrice != null){
                    LightningCart_Wrapper_product.totalPrice = String.valueOf(Integer.valueOf(productsMap.get(LineItem).quantity) * productActualPriceMap.get(LineItem).ActualPrice.setScale(2));
                }
                if(productActualPriceMap.get(LineItem).ActualPrice != null)
                    LightningCart_Wrapper_product.applicablePrice = String.valueOf(productActualPriceMap.get(LineItem).ActualPrice.setScale(2));
                if(productActualPriceMap.get(LineItem).ActualPrice != null)
                    LightningCart_Wrapper_product.ActualPrice = String.valueOf(productActualPriceMap.get(LineItem).ActualPrice.setScale(2));
                if(LightningCart_Wrapper_product.applicablePrice == null)
                    LightningCart_Wrapper_product.applicablePrice = '0';
                if(LightningCart_Wrapper_product.ActualPrice == null)
                    LightningCart_Wrapper_product.ActualPrice = '0';
                    
                LightningCart_Wrapper_product.quantity  = integer.valueOf(productsMap.get(LineItem).quantity);
                LightningCart_Wrapper_product.category  = prodIdMap.get(LineItem).Product_Category__c;
                LightningCart_Wrapper_product.imageUrl  = prodIdMap.get(LineItem).Apttus_Config2__IconId__c;
                LightningCart_Wrapper_product.productRanking = Integer.valueOf(prodIdMap.get(LineItem).Product_Ranking__c);
                LightningCart_Wrapper_product.IsFlex = prodIdMap.get(LineItem).Is_Flex__c;
                LightningCart_Wrapper_product.IsHardwareFlag  = String.valueOf(prodIdMap.get(LineItem).APTSCU_Is_Hardware__c);
                //LightningCart_Wrapper_product.endCustomerPrice = productsMap.get(LineItem).endCustomerPrice;
                LightningCart_Wrapper_product.tax = 0;
                LightningCart_Wrapper_product.isEppApplied = Boolean.valueOf(productsMap.get(LineItem).isEppApplied);
                //LightningCart_Wrapper_product.eppMonths = LineItem.Epp_Months__c;
                if(quoteProposal != null && !quoteProposal.isEmpty()){
                    if(quoteProposal[0].Apttus_QPConfig__PriceListId__r.Tier_Based_Pricing_Needed__c)
                        LightningCart_Wrapper_product.isTierPricing = true;
                }
                
                if(!catalogProdMap.isEmpty() && catalogProdMap.containsKey(productActualPriceMap.get(LineItem).priceListItemId) 
                && catalogProdMap.get(productActualPriceMap.get(LineItem).priceListItemId) != null){
                    LightningCart_Wrapper_product.SeatCount = new List<LightningCart_Wrapper.SeatCount>();
                    Pricinghandler.catalogwrapper res1 = catalogProdMap.get(productActualPriceMap.get(LineItem).priceListItemId);
                    LightningCart_Wrapper_product.priceListItemId = res1.priceListItemId;
                    if(res1.master_Product != null){
                        LightningCart_Wrapper_product.master_Product  = res1.master_Product;
                    }
                    if(res1 != null && res1.SeatCount != null){
                        for(Pricinghandler.TierPricingwrapper eachSt: res1.SeatCount){
                            LightningCart_Wrapper.SeatCount st = new LightningCart_Wrapper.SeatCount();
                            st.price = eachSt.price;
                            st.MinValue = eachSt.MinValue;
                            st.MaxValue = eachSt.MaxValue;
                            LightningCart_Wrapper_product.SeatCount.add(st);
                        }
                    }
                }
                if(LightningCart_Wrapper_product.priceListItemId == null && !catalogProdMap2.isEmpty() 
                && catalogProdMap2.containsKey(prodIdMap.get(LineItem).ProductCode) 
                && catalogProdMap2.get(prodIdMap.get(LineItem).ProductCode) != null){
                    Pricinghandler.catalogwrapper res1 = catalogProdMap2.get(prodIdMap.get(LineItem).ProductCode);
                    LightningCart_Wrapper_product.priceListItemId = res1.priceListItemId;
                    if(res1.master_Product != null){
                        LightningCart_Wrapper_product.master_Product  = res1.master_Product;
                    }
                }
                /*if(LineItem.Shipping_Charges__c != null && LineItem.PX_Shipping_Speed__c != null){
                    shipMethod.label = LineItem.Shipping_Charges__c + ' - ' + LineItem.PX_Shipping_Speed__c;
                    shipMethod.method = String.valueOf(LineItem.PX_Shipping_Speed__c);
                    LightningCart_Wrapper.price p = new LightningCart_Wrapper.price();
                    p.value = String.valueOf(LineItem.Shipping_Charges__c);
                    shipMethod.price = p;
                }*/
        
                if(productActualPriceMap.get(LineItem).ActualPrice != null){
                    totalVal += productActualPriceMap.get(LineItem).ActualPrice;
                }
                if(!prodList.contains(LightningCart_Wrapper_product.productCode)){
                    prods.add(LightningCart_Wrapper_product);
                }
        
            }
            obj.SectionListPrice = String.valueOf(totalVal.setScale(2));
            obj.products = prods;
            obj.location = loc;
            obj.shippingMethod = shipMethod;
            obj.contractterm = quoteProposal[0].Contract_Terms__c.substring(0,2);
            obj.contractEndDate = quoteProposal[0].Apttus_Proposal__ExpectedEndDate__c;
            if(quoteProposal[0].Apttus_Proposal__Account__r.Free_Month_End_Date__c != null){
               obj.is123Plan = true;
            }else {
                obj.is123Plan = false;
            }
            finalJson.add(obj);
        }
        String finalJSONString = JSON.serialize(finalJson);
System.debug('FINAAAAAL-'+finalJSONString);
        //String tempJSON = '"PORefrenceJSONString" :'+'\'{"varPORefrence":"tempTEXT","distiPORefrence":"tempTEXT"}'+'\'';
        lightningCartController.createAsyncQuoteAndOrder(finalJSONString, quoteId, '','');
    }
    
    public static Map<String, Product2> getProdIds(Set<String> prodList){
        Map<String, Product2> prodIdMap = new Map<String, Product2>();
        if(prodList != null){
            for(Product2 prd : [select Id, Name, Product_Category__c, Product_Sub_Category__c, Is_Flex__c,
                                        Apttus_Config2__IconId__c, Product_Ranking__c, ProductCode, 
                                        APTSCU_Is_Hardware__c, Family FROM Product2 where Name IN:prodList]){
                prodIdMap.put(prd.Name, prd);
            }
        }
        return prodIdMap;
    }
    
    public class RequestDataWrapper{
        public String quoteId;
        public Map<String, ProductInfoWrapper> products;
        public LocationWrapper location;
    }
    
    public class ProductInfoWrapper{
        public Decimal quantity;
        public Decimal netprice;
        public Decimal baseprice;
        public String adjustmentType;
        public Decimal adjustmentAmount;
        public String isEppApplied;
    }
    
    public class LocationWrapper{
        public String name;
        public String locationId;
        public String Street;
        public String city;
        public String state;
        public String zip;
        public String country;
    }
    
    public class ProductCatWrap{
        public String subCategory;
        public String ProductWeight;
        public Double productRanking;
        public String productName;
        public String productId;
        public String productCode;
        public String priceListItemId;
        public String price;
        public String minimumPrice;
        public String master_Product;
        public Boolean isTierPricing;
        public Boolean isHardware;
        public Boolean IsFlex;
        public Boolean isEppApplied;
        public Boolean IsContractPrice;
        public Boolean is123PlanExempt;
        public String imageUrl;
        public String family;
        public Boolean ExcludeFromCumulativeQty;
        public Boolean ExcludeFromCartQty;
        public String EppPriceComparison;
        public String eppMonths;
        public String Description;
        public String category;
        public String AddOnPricingTier;
        public Decimal ActualPrice;
    }
}